from django.http import HttpResponse

import os, bmemcached, emoji

from classes.tg.botApi import Bot

class Public:

    def __init__(self, message):

        try:

            mc_servers = os.environ.get('MEMCACHIER_SERVERS', '').split(',')
            mc_user = os.environ.get('MEMCACHIER_USERNAME', '')
            mc_passw = os.environ.get('MEMCACHIER_PASSWORD', '')
            token = os.getenv("TOKEN")
            master = int(os.getenv("MASTER"))
            debug = os.getenv("DEBUG")
            groupHutor = -464572634 # group
            groupHutor2 = -1001471520704 # supergroup
            groupHutor3 = -1001393395949 # supergroup
            testerBotoff = 351009636
            message_id = message.getMessageId()
            text = message.getText()
            photo= message.getPhoto()
            inline_keyboard_markup = {
                'inline_keyboard':[
                    #[
                    #    {'text':'–°–∞–π—Ç –•—É—Ç–æ—Ä—è–Ω–∏–Ω–™','url':'https://hutoryanin.herokuapp.com'}
                    #],
                    [
                        {'text':'–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ—Ü.—Å–µ—Ç–∏','url':'https://t.me/hutoryanin_chat/271'}
                    ]
                ]
            }

            mc = bmemcached.Client(mc_servers, username=mc_user, password=mc_passw)
            mc.enable_retry_delay(True)

            # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
            tg = Bot(token)

            if mc.get("wait") == "markdown":

                response = tg.sendMessage(master, text, "markdown", True)
                mc.delete("wait")

                response = tg.sendMessage(master, "–ì–æ—Ç–æ–≤–æ.")


            elif mc.get("wait") == "photo":
                if photo != []:
                    file_id = photo[2].getFileId()
                    response = tg.sendPhoto(master, file_id, mc.get("url"), reply_markup=inline_keyboard_markup)
                    mc.set("wait", "url")
                    mc.set("file_id", file_id)
                    response = tg.sendMessage(master, "–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
                else:
                    response = tg.sendMessage(master, "–ù—É–∂–Ω–æ —Ñ–æ—Ç–æ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ .jpg")


            elif mc.get("wait") == "url":

                caption = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –≤—Å–µ! ü§öüèª\n\n"
                caption += "–í —ç—Ç–æ–º –≤–∏–¥–µ–æ —è —Ä–∞—Å–∫–∞–∂—É –æ —Å–≤–æ—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏–¥—è –Ω–∞ –∫–µ—Ç–æ-–¥–∏–µ—Ç–µ —É–∂–µ —Ç—Ä–∏ –º–µ—Å—è—Ü–∞, —á–µ—Ç–≤—ë—Ä—Ç—ã–π –ø–æ—à—ë–ª.\n\n"
                caption += "–°–º–æ—Ç—Ä–∏—Ç–µ, –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, —Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫–∏, –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.\n*–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!*üòâ\n"

                text_url = "\n[–°–ú–û–¢–†–ï–¢–¨ –≠–¢–û –í–ò–î–ï–û!](" + text + ")"
                text_url = text_url * 3

                response = tg.sendPhoto(master, mc.get("file_id"), caption + text_url, "markdown", reply_markup=inline_keyboard_markup)

                #response = tg.sendMessage(master, text, reply_markup=inline_keyboard_markup)
                #mc.set("wait", "description")
                #mc.set("url", text)
                #response = tg.sendMessage(master, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ.")
                response = tg.sendMessage(master, "–í—Å—ë.")
                mc.delete("wait")
                #mc.delete("url")
                mc.delete("file_id")


            elif mc.get("wait") == "description":
                pass
                '''
                url = mc.get("url")
                text_url = "\n[–°–ú–û–¢–†–ï–¢–¨ –≠–¢–û –í–ò–î–ï–û!](" + url + ")"
                text_url = text_url * 3
                response = tg.sendPhoto(master, mc.get("file_id"), text + "\n" + text_url, "markdown", reply_markup=inline_keyboard_markup)
                mc.delete("wait")
                mc.delete("url")
                mc.delete("file_id")
                response = tg.sendMessage(master, "–í—Å—ë.")
                '''

            else:
                response = tg.sendMessage(master, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
                mc.delete("wait")
                #mc.delete("url")
                mc.delete("file_id")

        except:

            mc.delete("wait")
            #mc.delete("url")
            mc.delete("file_id")

            return HttpResponse("ok")


        return HttpResponse("ok")


